
for snapshot_number in snapshot_indexes_to_export:
    print('Snapshot number ' + str(snapshot_number) + ' at time ' + str(s.nums[snapshot_number]) + ' Myr')
    
    ds = s.load_vtk(num=s.nums[snapshot_number])
    electron_density = ds.get_field('ne')
    temperature = ds.get_field('T')
    
    ne_fld = (electron_density['ne'].data.transpose(2, 1, 0)[:,:,min_height:max_height]).reshape(256, 256, tot_height_cells)
    te_fld = (temperature['T'].data.transpose(2, 1, 0)[:,:,min_height:max_height]).reshape(256, 256, tot_height_cells) / 1e4
    
    raw = h_alpha_energy * (1.17e-13 / (4*np.pi)) * (te_fld**(-0.942-0.030*np.log(te_fld))) * ((ne_fld)**2  * number_density_cf * volume)
    alpha = 1.17e-13 * (te_fld**(-0.942-0.030*np.log(te_fld)))
    raw_2 = raw / (4. * 4. * 1e-6)
    
    image_Ha = np.sum(raw_2, axis=-1).transpose()

    D = 10 * units.Mpc
    D_cm = D.to(units.cm).value
    kpc_per_arcsec = (D.to(units.kpc) * (1 * units.arcsec).to(units.radian)).value
    area_kpc2_per_arcsec2 = kpc_per_arcsec**2
    image_Ha_L_arcsec2 = image_Ha / (4 * np.pi * D_cm**2) * area_kpc2_per_arcsec2

    print(np.nanmean(np.ndarray.flatten(image_Ha_L_arcsec2)))
